{"version":3,"file":"static/js/887.44f80418.chunk.js","mappings":"4MAOA,MA8GA,EA9GwBA,KACtB,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,KAChDC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,CAAC,IACvCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,CAAC,IAEtDK,EAAAA,EAAAA,YAAU,KACqBC,WAC3B,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,0CACjCV,EAAmBQ,EAASG,MAC5BC,EAAkBJ,EAASG,KAC7B,CAAE,MAAOE,GACPC,QAAQD,MAAM,mCAAoCA,EACpD,GAGFE,EAAsB,GACrB,IAEH,MAAMH,EAAqBI,IACzB,MAAMC,EAAkB,CAAC,EACnBC,EAAsB,CAAC,EAE7BF,EAAOG,SAAQC,IAETH,EAAgBG,EAAMC,aACxBJ,EAAgBG,EAAMC,eAEtBJ,EAAgBG,EAAMC,aAAe,EAIzBD,EAAMA,MAAME,MAAM,MAC1BH,SAAQI,IACRL,EAAoBK,GACtBL,EAAoBK,KAEpBL,EAAoBK,GAAQ,CAC9B,GACA,IAGJpB,EAAcc,GACdZ,EAAkBa,EAAoB,EAGlCM,EAAiB,CACrBC,OAAQC,OAAOC,KAAKzB,GACpB0B,SAAU,CACR,CACEC,MAAO,cACPlB,KAAMe,OAAOI,OAAO5B,GACpB6B,gBAAiB,6BAKjBC,EAAqB,CACzBP,OAAQC,OAAOC,KAAKvB,GACpBwB,SAAU,CACR,CACEC,MAAO,kBACPlB,KAAMe,OAAOI,OAAO1B,GACpB2B,gBAAiB,8BAiBvB,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJC,EAAAA,EAAAA,KAAA,UAAQC,QAfQC,KAClB,MAAMC,EAAMC,IAAAA,QAAazC,GACnB0C,EAAO,IAAIC,KAAK,CAACH,GAAM,CAAEI,KAAM,4BAC/BC,EAAOC,SAASC,cAAc,KAC9BC,EAAMC,IAAIC,gBAAgBR,GAChCG,EAAKM,KAAOH,EACZH,EAAKO,aAAa,WAAY,wBAC9BN,SAASO,KAAKC,YAAYT,GAC1BA,EAAKU,QACLT,SAASO,KAAKG,YAAYX,EAAK,EAMAT,SAAC,mBAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAACoB,EAAAA,GAAG,CAAC7C,KAAMa,QAEbS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJC,EAAAA,EAAAA,KAACoB,EAAAA,GAAG,CAAC7C,KAAMqB,QAEbI,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SACzBpC,EAAgB0D,OAAS,EACxB1D,EAAgB2D,KAAItC,IAClBa,EAAAA,EAAAA,MAAA,OAA6BC,UAAU,QAAOC,SAAA,EAC5CF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAef,EAAMC,gBACxBY,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,SAAOf,EAAMuC,SAChB1B,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,UAAQf,EAAMA,UACjBa,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,WAASf,EAAMwC,YAJVxC,EAAMC,gBAQlBe,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kCAGH,C","sources":["CompletedOrdersComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport Papa from 'papaparse';\nimport './App.css';\n\nconst CompletedOrders = () => {\n  const [completedOrders, setCompletedOrders] = useState([]);\n  const [tableUsage, setTableUsage] = useState({});\n  const [orderFrequency, setOrderFrequency] = useState({});\n\n  useEffect(() => {\n    const fetchCompletedOrders = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/completed-orders');\n        setCompletedOrders(response.data);\n        processStatistics(response.data);\n      } catch (error) {\n        console.error('Error fetching completed orders:', error);\n      }\n    };\n\n    fetchCompletedOrders();\n  }, []);\n\n  const processStatistics = (orders) => {\n    const tableUsageCount = {};\n    const orderFrequencyCount = {};\n\n    orders.forEach(order => {\n      // Count table usage\n      if (tableUsageCount[order.tableNumber]) {\n        tableUsageCount[order.tableNumber]++;\n      } else {\n        tableUsageCount[order.tableNumber] = 1;\n      }\n\n      // Count order frequency\n      const items = order.order.split(', ');\n      items.forEach(item => {\n        if (orderFrequencyCount[item]) {\n          orderFrequencyCount[item]++;\n        } else {\n          orderFrequencyCount[item] = 1;\n        }\n      });\n    });\n\n    setTableUsage(tableUsageCount);\n    setOrderFrequency(orderFrequencyCount);\n  };\n\n  const tableUsageData = {\n    labels: Object.keys(tableUsage),\n    datasets: [\n      {\n        label: 'Table Usage',\n        data: Object.values(tableUsage),\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      },\n    ],\n  };\n\n  const orderFrequencyData = {\n    labels: Object.keys(orderFrequency),\n    datasets: [\n      {\n        label: 'Order Frequency',\n        data: Object.values(orderFrequency),\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n      },\n    ],\n  };\n\n  const exportToCSV = () => {\n    const csv = Papa.unparse(completedOrders);\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.href = url;\n    link.setAttribute('download', 'completed_orders.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Completed Orders</h1>\n      <button onClick={exportToCSV}>Export to CSV</button>\n      <div className=\"chart-container\">\n        <h2>Table Usage</h2>\n        <Bar data={tableUsageData} />\n      </div>\n      <div className=\"chart-container\">\n        <h2>Order Frequency</h2>\n        <Bar data={orderFrequencyData} />\n      </div>\n      <div className=\"orders-list\">\n        {completedOrders.length > 0 ? (\n          completedOrders.map(order => (\n            <div key={order.tableNumber} className=\"order\">\n              <p>Table Number: {order.tableNumber}</p>\n              <p>Name: {order.name}</p>\n              <p>Order: {order.order}</p>\n              <p>Status: {order.status}</p>\n            </div>\n          ))\n        ) : (\n          <p>No completed orders found</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CompletedOrders;"],"names":["CompletedOrders","completedOrders","setCompletedOrders","useState","tableUsage","setTableUsage","orderFrequency","setOrderFrequency","useEffect","async","response","axios","get","data","processStatistics","error","console","fetchCompletedOrders","orders","tableUsageCount","orderFrequencyCount","forEach","order","tableNumber","split","item","tableUsageData","labels","Object","keys","datasets","label","values","backgroundColor","orderFrequencyData","_jsxs","className","children","_jsx","onClick","exportToCSV","csv","Papa","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","href","setAttribute","body","appendChild","click","removeChild","Bar","length","map","name","status"],"sourceRoot":""}