{"version":3,"file":"static/js/147.ae7ddb8a.chunk.js","mappings":"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","sources":["FormComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\n\nconst FormComponent = () => {\n  const { tableNumber } = useParams();\n  const navigate = useNavigate();\n  const [name, setName] = useState('');\n  const [order, setOrder] = useState('');\n  const [orderStatus, setOrderStatus] = useState('No Order');\n  const [existingOrderName, setExistingOrderName] = useState('');\n  const [showThankYou, setShowThankYou] = useState(false);\n\n  useEffect(() => {\n    const checkOrderStatus = async () => {\n      try {\n        const response = await axios.get(`http://localhost:3001/order-status/${tableNumber}`);\n        setOrderStatus(response.data.status);\n        setExistingOrderName(response.data.name || '');\n        if (response.data.status === 'Completed') {\n          setShowThankYou(true);\n        }\n      } catch (error) {\n        console.error('Error checking order status:', error);\n      }\n    };\n\n    checkOrderStatus();\n  }, [tableNumber]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const orderData = { tableNumber: parseInt(tableNumber), name, order };\n    try {\n      await axios.post('http://localhost:3001/submit-order', orderData);\n      alert('Order submitted successfully');\n      navigate(`/order-status/${tableNumber}`);\n    } catch (error) {\n      console.error('Error submitting order:', error);\n      alert('Failed to submit order');\n    }\n  };\n\n  const handleCheckStatus = (e) => {\n    e.preventDefault();\n    if (existingOrderName && name.trim().toLowerCase() === existingOrderName.trim().toLowerCase()) {\n      navigate(`/order-status/${tableNumber}`);\n    } else {\n      alert('Name does not match the existing order.');\n    }\n  };\n\n  if (showThankYou) {\n    return (\n      <div className=\"container\">\n        <h1>Thank you for dining with us!</h1>\n        <button onClick={() => {\n          setShowThankYou(false);\n          setOrderStatus('No Order');\n          setExistingOrderName('');\n          setName('');\n          setOrder('');\n        }}>OK</button>\n      </div>\n    );\n  }\n\n  if (orderStatus === 'Pending' || orderStatus === 'In Progress') {\n    return (\n      <div className=\"container\">\n        <h1>Form for Table {tableNumber}</h1>\n        <p>An order has already been submitted for this table. You cannot submit another order until the current order is completed.</p>\n        <p>Enter your name to check your status:</p>\n        <form onSubmit={handleCheckStatus}>\n          <div className=\"form-group\">\n            <label>Name:</label>\n            <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n          </div>\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Form for Table {tableNumber}</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Table Number:</label>\n          <input type=\"text\" value={tableNumber} readOnly />\n        </div>\n        <div className=\"form-group\">\n          <label>Name:</label>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </div>\n        <div className=\"form-group\">\n          <label>Order:</label>\n          <textarea value={order} onChange={(e) => setOrder(e.target.value)}></textarea>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default FormComponent;"],"names":["FormComponent","tableNumber","useParams","navigate","useNavigate","name","setName","useState","order","setOrder","orderStatus","setOrderStatus","existingOrderName","setExistingOrderName","showThankYou","setShowThankYou","useEffect","async","response","axios","get","concat","data","status","error","console","checkOrderStatus","handleCheckStatus","e","preventDefault","trim","toLowerCase","alert","_jsxs","className","children","_jsx","onClick","onSubmit","type","value","onChange","target","orderData","parseInt","post","readOnly"],"sourceRoot":""}